# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration
# Uses Tera Templates see
# https://keats.github.io/tera/docs/#introduction 

[remote.github]
owner = "fluxdiv"
repo = "quickfig"

[changelog]
# Changelog header
header = "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n"

body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {%- for commit in commits %}
        - {% if commit.scope %}({{ commit.scope }}) {% endif %}{{ commit.message | split(pat="\n") | first | upper_first | trim }}\
            {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif -%}
            {% if commit.remote.pr_number %} in \
            [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }}) \
            {%- endif -%}
    {% endfor %}
{% endfor %}
---
\n
"""
footer = "\n---\n"

# Groups order in output
sort_commits = "group"
group_order = ["Added", "Fixed", "Changed", "Performance", "Docs", "Styling", "Testing", "Build", "Chore", "Reverted", "Other"]

# Use Keep a Changelog formatting
trim = true

[git]
# Include commits from all workspace members
include = ".*"
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = false
# An array of regex based parsers to modify commit messages prior to further processing
# commit_preprocessors = [
#   # Remove issue numbers.
#   { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
# ]

# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
  { message = "(?i)^feat(?:\\((?P<scope>.*)\\))?", group = "Added" },
  { message = "(?i)^fix(?:\\((?P<scope>.*)\\))?", group = "Fixed" },
  { message = "(?i)^refactor(?:\\((?P<scope>.*)\\))?", group = "Changed" },
  { message = "(?i)^perf(?:\\((?P<scope>.*)\\))?", group = "Performance" },
  { message = "(?i)^docs(?:\\((?P<scope>.*)\\))?", group = "Docs" },
  { message = "(?i)^style(?:\\((?P<scope>.*)\\))?", group = "Styling" },
  { message = "(?i)^test(?:\\((?P<scope>.*)\\))?", group = "Testing" },
  { message = "(?i)^build(?:\\((?P<scope>.*)\\))?", group = "Build" },
  { message = "(?i)^ci(?:\\((?P<scope>.*)\\))?", group = "Build" },
  { message = "(?i)^chore(?:\\((?P<scope>.*)\\))?", group = "Chore" },
  { message = "(?i)^revert(?:\\((?P<scope>.*)\\))?", group = "Reverted" },
  { message = ".*", group = "Other" }
]

# Exclude commits that are not matched by any commit parser.
filter_commits = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "newest"


